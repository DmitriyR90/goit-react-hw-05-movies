{"version":3,"file":"static/js/599.1500b4fe.chunk.js","mappings":"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","sources":["API.jsx","components/MovieInfoPath/MovieInfoPath.styled.jsx","components/MovieInfoPath/MovieInfoPath.jsx","components/AddInfo/AddInfo.styled.jsx","components/AddInfo/AddInfo.jsx","components/MoviesDetails/MoviesDetails.styled.jsx","components/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '5dfa5b901aee38fd7ab0c698d7fb5f4c';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const PER_PAGE = 12;\n\nexport const getTrandings = async () => {\n  const url = `/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n\n  return response.data.results;\n};\n\nexport const getMovieInfo = async id => {\n  const url = `/movie/${id}?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport const getCasts = async id => {\n  const url = `/movie/${id}/credits?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n\n  return response.data.cast;\n};\n\nexport const getRewiews = async id => {\n  const url = `/movie/${id}/reviews?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport const getMovies = async query => {\n  const url = `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`;\n\n  const response = await axios.get(url);\n\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const MovieInfoWrap = styled.div`\n  display: flex;\n  padding: 8px;\n  border-bottom: 2px solid grey;\n`;\n\nexport const MovieInfo = styled.div`\n  padding: 0 16px;\n`;\n","import { MovieInfoWrap, MovieInfo } from './MovieInfoPath.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieInfoPath = ({ movie }) => {\n  const year = movie.release_date.slice(0, 4);\n  const title = movie.original_title;\n  const score = Number.parseInt(movie.vote_average * 10);\n  const genres = movie.genres.map(genre => genre.name).join(' ');\n\n  return (\n    <MovieInfoWrap>\n      <img\n        src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n        alt=\"\"\n        width=\"240px\"\n      />\n      <MovieInfo>\n        <h2>\n          {title} ({year})\n        </h2>\n        <p>\n          User Score:\n          {score}%\n        </p>\n        <h3>Overview:</h3>\n        <p>{movie.overview}</p>\n        <h4>Genres</h4>\n        <p>{genres}</p>\n      </MovieInfo>\n    </MovieInfoWrap>\n  );\n};\n\nMovieInfoPath.propTypes = {\n  movie: PropTypes.shape({\n    release_date: PropTypes.string.isRequired,\n    original_title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ),\n  }),\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const AddWrap = styled.div`\n  border-bottom: 2px solid grey;\n  padding: 0 16px;\n`;\n\nexport const StyledLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n  font-size: 20px;\n  font-weight: 500;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { AddWrap, StyledLink } from './AddInfo.styled';\n\nexport const AddInfo = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  return (\n    <AddWrap>\n      <p>Additional information</p>\n      <ul>\n        <li>\n          <StyledLink to={'cast'} state={{ from: backLinkHref }}>\n            Cast\n          </StyledLink>\n        </li>\n        <li>\n          <StyledLink to={'reviews'} state={{ from: backLinkHref }}>\n            Reviews\n          </StyledLink>\n        </li>\n      </ul>\n    </AddWrap>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieWrap = styled.div`\n  padding: 16px 32px;\n`;\n\nexport const BackBtn = styled(Link)`\n  text-decoration: none;\n  display: inline-block;\n  border-radius: 6px;\n  border: 1px solid #ddd;\n  padding: 8px 16px;\n  background-color: #f1f1f1;\n  color: black;\n  margin: 6px;\n  &:hover {\n    background-color: #ddd;\n    color: black;\n  }\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { useLocation, useParams, Outlet } from 'react-router-dom';\nimport { getMovieInfo } from '../../API';\nimport { MovieInfoPath } from 'components/MovieInfoPath/MovieInfoPath';\nimport { AddInfo } from '../AddInfo/AddInfo';\nimport { MovieWrap, BackBtn } from './MoviesDetails.styled';\n\nconst MoviesDetails = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      try {\n        const response = await getMovieInfo(id);\n        setMovie(response);\n      } catch {\n      } finally {\n      }\n    }\n    getMovieDetails(id);\n  }, [id]);\n\n  return (\n    movie && (\n      <main>\n        <MovieWrap>\n          <BackBtn to={backLinkHref}>&laquo; Go back</BackBtn>\n\n          <MovieInfoPath movie={movie}></MovieInfoPath>\n          <AddInfo />\n\n          <Suspense fallback={<div>Loading page...</div>}>\n            <Outlet />\n          </Suspense>\n        </MovieWrap>\n      </main>\n    )\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["API_KEY","axios","getTrandings","url","response","data","results","getMovieInfo","id","getCasts","cast","getRewiews","getMovies","query","MovieInfoWrap","styled","MovieInfo","MovieInfoPath","movie","year","release_date","slice","title","original_title","score","Number","parseInt","vote_average","genres","map","genre","name","join","src","poster_path","alt","width","overview","AddWrap","StyledLink","Link","AddInfo","backLinkHref","useLocation","state","from","to","MovieWrap","BackBtn","useParams","useState","setMovie","useEffect","getMovieDetails","Suspense","fallback"],"sourceRoot":""}